{"version":3,"sources":["components/Search.js","App.js","index.js"],"names":["Search","useState","query","setQuery","searchResults","setSearchResults","selectedCharacter","setSelectedCharacter","handleQueryResultClick","e","searchResultId","target","id","results","React","Children","toArray","map","item","idx","className","onClick","name","placeholder","onChange","value","console","log","length","fetch","then","res","json","data","catch","error","birth_year","height","gender","skin_color","App","ReactDOM","render","document","getElementById"],"mappings":"kMAkJeA,MA9If,WAAkB,MAGYC,mBAAS,IAHrB,mBAGPC,EAHO,KAGAC,EAHA,OAI4BF,mBAAS,IAJrC,mBAIPG,EAJO,KAIQC,EAJR,OAKoCJ,mBAAS,MAL7C,mBAKPK,EALO,KAKYC,EALZ,KA+ERC,EAAyB,SAACC,GAC5B,IAAMC,EAAiBD,EAAEE,OAAOC,GAIhCL,EAAqBH,EAAcM,IAEnCP,EAAS,KAOPU,EAAUC,IAAMC,SAASC,QAC3BZ,EAAca,KAAI,SAACC,EAAMC,GAAP,OACd,oBAAIC,UAAU,cAAcR,GAAIO,EAAKE,QAASb,EAA9C,SAAuEU,EAAKI,WAKpF,OAEI,cADA,CACA,QAAMF,UAAU,6BAAhB,UACI,uBACIG,YAAY,oBAEZC,SApEc,SAACf,GACvBN,EAASM,EAAEE,OAAOc,OAKlBC,QAAQC,IAAIvB,GACRF,GAASA,EAAM0B,OAAS,GAzB5BC,MAVc,wCAUI3B,GAEb4B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAKhBF,MAAK,SAAAG,GAAI,OAAI5B,EAAiB4B,EAAKpB,YAEnCqB,OAAM,SAAAzB,GACHiB,QAAQC,IAAI,CAAEQ,MAAO1B,QA8ErBgB,MAAOvB,IAGX,qBAAKkB,UAAU,qBAAf,SAEKlB,EAAM0B,OAAS,GACZ,6BACKf,MAQb,8BACKP,EACG,sBAAKc,UAAU,8BAAf,UACI,8BAAG,sBAAMA,UAAU,uBAAhB,mBAAH,IAAwDd,EAAkBgB,QAC1E,8BAAG,sBAAMF,UAAU,uBAAhB,gCAAH,IAAqEd,EAAkB8B,cACvF,8BAAG,sBAAMhB,UAAU,uBAAhB,qBAAH,IAA0Dd,EAAkB+B,UAC5E,8BAAG,sBAAMjB,UAAU,uBAAhB,wBAAH,IAA0Dd,EAAkBgC,UAC5E,8BAAG,sBAAMlB,UAAU,uBAAhB,0BAAH,IAA+Dd,EAAkBiC,cACjF,8BAAG,sBAAMnB,UAAU,uBAAhB,wBAAH,IAA0Dd,EAAkBgC,aAI5E,mBAAGlB,UAAU,oBAAb,4E,MC3HToB,MAXf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,kCACA,oBAAIA,UAAU,SAAd,uBACA,oBAAIA,UAAU,SAAd,0CACA,cAAC,EAAD,QCNNqB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.f483b1c8.chunk.js","sourcesContent":["//Aqui importamos o react e o useState que permite criar uma variável de state\nimport React, { useState } from 'react'\n\n//aqui a função de busca onde:\nfunction Search() {\n    //aqui o useState permite declarar duas variáveis e um estado inicial \n    //para elas, nestes casos vazios.\n    const [query, setQuery] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedCharacter, setSelectedCharacter] = useState(null);\n    //aqui eu crio uma const com a URL de pesquisa. Essa é uma API simples\n    //que é simples de usar e como a proposta aqui não é o consumo da API e sim\n    //o autocompletar resolvi usar essa mesmo. Ela retorna uma busca de personagens de \n    //star wars.\n    const searchURL = 'https://swapi.dev/api/people/?search=';\n\n   \n\n    //o próximo passo é fazermos a busca propriamente dita e \n    //começamos com um fetch nessa API:\n    const getInfo = () => {\n        //o fecth busca de forma assíncrona então SEMPRE temos de usar ele\n        //com a URL que neste caso juntamos a query e o .then pra tratar \n        //a resposat recebida. Ele retorna um objeto como Promise.\n        fetch(searchURL + query)\n            //aqui o 1º then pega a resposta e define ela como sendo json\n            .then(res => res.json())\n            //tambem pega os dados e chama setSearchResults enviando como argumento\n            //o data.results. Tanto searchResults quanto esse set search criamos com \n            //o useState lá no começo e definimos o estado inicial dele para vazio.\n            //Agora estamos defininco o estado para os results do data do json.\n            .then(data => setSearchResults(data.results))\n            //se der erro ele pega aqui.\n            .catch(e => {\n                console.log({ error: e });\n            });\n    }\n    //esse handleinputChange está no onchange do campo de entrada de texto.\n    //ele recebe um evento e atribui o valor desse evento (o que estiver sendo digitado)\n    //na const setQuery que criamos lá no início e que tem o seu state como vazio.\n    //essa função é que vai preencher o state da query com as letras do que digitarmos\n    //e fará isso a cada mudança, ou seja, a cada letra digitada.\n    const handleInputChange = (e) => {\n        setQuery(e.target.value)\n        //essa condicional determina que se houver query e se o comprimento for\n        //maior que zero chama getInfo, que é a nossa função inicial. Isso significa\n        //que a cada caractere digitado uma busca na API é feita.\n        //deixei esse console.log aqui pra acompanhar esse retorno da API.\n        console.log(searchResults)\n        if (query && query.length > 0) {\n            getInfo();\n        }\n    }\n\n    //Os resultados estão armazenados em searchResults como um array cheio de objetos.\n    //cada objeto é um personagem com várias chaves, como descrito abaixo:\n\n    // (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\n    // 0:\n    // birth_year: \"19BBY\"\n    // created: \"2014-12-09T13:50:51.644000Z\"\n    // edited: \"2014-12-20T21:17:56.891000Z\"\n    // eye_color: \"blue\"\n    // films: (4) [\"http://swapi.dev/api/films/1/\", \"http://swapi.dev/api/films/2/\", \"http://swapi.dev/api/films/3/\", \"http://swapi.dev/api/films/6/\"]\n    // gender: \"male\"\n    // hair_color: \"blond\"\n    // height: \"172\"\n    // homeworld: \"http://swapi.dev/api/planets/1/\"\n    // mass: \"77\"\n    // name: \"Luke Skywalker\"\n    // skin_color: \"fair\"\n    // species: []\n    // starships: (2) [\"http://swapi.dev/api/starships/12/\", \"http://swapi.dev/api/starships/22/\"]\n    // url: \"http://swapi.dev/api/people/1/\"\n    // vehicles: (2) [\"http://swapi.dev/api/vehicles/14/\", \"http://swapi.dev/api/vehicles/30/\"]\n    // __proto__: Object\n    // 1: {name: \"R2-D2\", height: \"96\", mass: \"32\", hair_color: \"n/a\", skin_color: \"white, blue\", …}\n    // 2: {name: \"Darth Vader\", height: \"202\", mass: \"136\", hair_color: \"none\", skin_color: \"white\", …}\n    // 3: {name: \"Leia Organa\", height: \"150\", mass: \"49\", hair_color: \"brown\", skin_color: \"light\", …}\n    // 4: {name: \"Owen Lars\", height: \"178\", mass: \"120\", hair_color: \"brown, grey\", skin_color: \"light\", …}\n\n    //essa função é chamada quando o usuário clica em um dos resultados.\n    //ela identifica qual desses ids foi clicado e armazena em uma const chamada searchResultId.\n    const handleQueryResultClick = (e) => {\n        const searchResultId = e.target.id;\n        //lá no useState criamos também um setSelectedCharacter que neste caso será o id\n        //correspondente a ele no array de resultados. \n        //no exemplo acima se o clicado fosse o id 0 o personagem seria \"Luke Skywalker\"\n        setSelectedCharacter(searchResults[searchResultId]);\n        //e depois de fazer isso zeramos a query.\n        setQuery([]);\n    }\n\n    //aqui vamos trabalhar com os resultados propriamente ditos, quando um personagem é escolhido.\n    //React.Children fornece ultiltários para que possamos trabalhar os dados. Por exemplo este toArray\n    //faz um map nos resultados da buscafornecendo acesso ao item e idx. A gente vai colocar o retorno desse\n    //map em itens de lista como descrito abaixo.\n    const results = React.Children.toArray(\n        searchResults.map((item, idx) => (\n            <li className='result-item' id={idx} onClick={handleQueryResultClick}>{item.name}</li>\n        ))\n    )\n\n    //no return aqui do Search temos:\n    return (\n        //um form que vai receber a nossa entrada de texto\n        <form className='search-form-container text'>\n            <input\n                placeholder='Procurando por...'\n                //ao digitar cada letra essa função de handleInput é chamada\n                onChange={handleInputChange}\n                //e o valor da query é recebido pois a handleInput atribui valor para o state que atribui para a query. \n                value={query}\n            />\n            {/* aqui é onde vamos controlar a lista de sugestões que apaecerá ao digitarmos. */}\n            <div className='query-results-list'>\n                {/* quando o comprimento da query for maior que 1 e houver resultados eles serão exibidos */}\n                {query.length > 1 && (\n                    <ul>\n                        {results}\n                    </ul>\n                )}\n\n            </div>\n            \n            {/* Por fim aqui nessa div mandamos os dados que quisermos do personagem. Neste caso nome, altura e massa.\n            Tudo usando os dados do selectedCharacter */}\n            <div>\n                {selectedCharacter ? (\n                    <div className='character-display-container'>\n                        <p><span className='character-info-title'>Nome:</span> {selectedCharacter.name}</p>\n                        <p><span className='character-info-title'>Ano de nascimento:</span> {selectedCharacter.birth_year}</p>\n                        <p><span className='character-info-title'>Altura:</span> {selectedCharacter.height}</p>\n                        <p><span className='character-info-title'>Gênero:</span> {selectedCharacter.gender}</p>\n                        <p><span className='character-info-title'>Cor da pele:</span> {selectedCharacter.skin_color}</p>\n                        <p><span className='character-info-title'>Gênero:</span> {selectedCharacter.gender}</p>\n                        \n                    </div>\n                ) : (\n                        <p className='no-results-prompt'>Sem resultados. Tenta digitar algo na caixa de pesquisa.</p>\n                    )}\n            </div>\n        </form>\n    )\n}\n\nexport default Search","import React from 'react';\n//Importamos nosso componente Search.js e usamos ele em APP.\nimport Search from './components/Search';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h4 className=\"titulo\">Busca personagens de</h4>\n      <h1 className=\"titulo\">Star Wars</h1>\n      <h4 className=\"titulo\">com Autocompletar em ReactJS</h4>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}